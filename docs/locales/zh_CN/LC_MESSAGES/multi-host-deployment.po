# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Zonghang Li
# This file is distributed under the same license as the GeoMX package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GeoMX 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-02 09:50+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/multi-host-deployment.rst:2 9cfc528eb60c4ac1b60aeddf728c0256
msgid "Deploy GeoMX on Multiple Hosts"
msgstr ""

#: ../../source/multi-host-deployment.rst:4 001cdb99dc534c9db625c55913c70d6d
msgid ""
"To deploy GeoMX on real-world geographical data centers, we need to use "
"the multi-host mode for cluster deployment."
msgstr ""

#: ../../source/multi-host-deployment.rst:7 7efae6eb419a46819c7e5511081ad303
msgid ""
"In this tutorial, we use three host machines as an example, namely A, B, "
"and C with their respective IP addresses as follows:"
msgstr ""

#: ../../source/multi-host-deployment.rst:10 509312013a2b441d88ce6bb216ce475d
msgid "Host A IP: 10.1.1.34"
msgstr ""

#: ../../source/multi-host-deployment.rst:11 433738a794ad4ab49028c3f13e191a7a
msgid "Host B IP: 10.1.1.29"
msgstr ""

#: ../../source/multi-host-deployment.rst:12 9296f076314b42bd84ebc9977d26f102
msgid "Host C IP: 10.1.1.33"
msgstr ""

#: ../../source/multi-host-deployment.rst:14 4e4ab463940e4c1aa30054e240e3c9ea
msgid ""
"To simulate the interconnection among three data centers using these "
"three host machines, we manually segregate the Docker containers on these"
" machines into three distinct network segments."
msgstr ""

#: ../../source/multi-host-deployment.rst:18 9f53e5cbf5704bf18671ff87056366fa
msgid "Host A: bridge docker0, 172.17.34.0/24"
msgstr ""

#: ../../source/multi-host-deployment.rst:19 ea828b50f91848629f9f3695f896656d
msgid "Host B: bridge docker0, 172.17.29.0/24"
msgstr ""

#: ../../source/multi-host-deployment.rst:20 5518b69195ef47bdab72103083cb3b22
msgid "Host C: bridge docker0, 172.17.33.0/24"
msgstr ""

#: ../../source/multi-host-deployment.rst:25 8ff9cb1564cf49ef8a705494549e2898
msgid ""
"We can use the following configuration example to guide you on how to "
"configure the Docker bridge network on your own machines."
msgstr ""

#: ../../source/multi-host-deployment.rst:28 2b131592fdc6487db834e6adccb04bac
msgid ""
"On each of the host machines, modify the Docker configuration file "
"``/etc/docker/daemon.json`` to set the ``bip`` (Bridge IP) to a specific "
"subnet. For instance, on host A with IP 10.1.1.34, set the ``bip`` to "
"172.17.34.1/24. Similar modifications should be made for host B and C, as"
" shown in the following:"
msgstr ""

#: ../../source/multi-host-deployment.rst:44 531c288ea8b64eda96b947c6490cdbb9
msgid ""
"This step defines the IP range for the Docker bridge network on each "
"host. By separating the networks in this way, each Docker container on "
"the hosts can have its unique IP, which assists in simulating "
"intercommunication across different networks."
msgstr ""

#: ../../source/multi-host-deployment.rst:49 703d45ccbd24436f98af2a9becf92ea9
msgid ""
"Please note that once you change this configuration, you need to restart "
"the Docker service to apply the changes. You can check the status of the "
"Docker service using the ``service docker status`` command to ensure that"
" it has restarted successfully."
msgstr ""

#: ../../source/multi-host-deployment.rst:54 5a518e4f9cc8406bb7becdbd26149660
msgid ""
"To enable intercommunication between containers located within different "
"network segments, we can configure the route table on the host machines "
"to assist in forwarding IP packets sent from the containers."
msgstr ""

#: ../../source/multi-host-deployment.rst:58 ea4bd04fbec64af79bbd0d2c90e4b75e
msgid ""
"The ``route`` command is used to modify the IP routing table of the Linux"
" kernel. It’s a way to define how packets should be forwarded depending "
"on their destination address. Here is an example on how to set it up on "
"each host:"
msgstr ""

#: ../../source/multi-host-deployment.rst:77 8490be74089f4182ab05f1c43322fe31
msgid ""
"These commands add routes to the table so that packets sent to the Docker"
" network on each host (e.g., 172.17.29.0, 172.17.33.0, and 172.17.34.0) "
"are forwarded to the corresponding IP (represented by 10.1.1.29, "
"10.1.1.33, and 10.1.1.34 respectively). As a result, the containers on "
"each host can communicate with the containers on the other hosts."
msgstr ""

#: ../../source/multi-host-deployment.rst:84 fb882099d2cc414aac6ca11c3575a810
msgid ""
"Next, we configure the iptables on hosts A, B, and C to support Source "
"Network Address Translation (SNAT). SNAT is necessary in this scenario "
"because it allows machines in different network segments (in this case, "
"the Docker containers on different hosts) to communicate with each other."
" This is achieved by translating the source IP address of an outgoing "
"packet to the IP address of the host machine. The host then routes the "
"packet to its destination, and when the packet returns, it translates the"
" destination IP back to the original Docker container."
msgstr ""

#: ../../source/multi-host-deployment.rst:93 a31fe6701b464a1aba675b84a6a5b087
msgid "Here’s how to set up SNAT with iptables on each host:"
msgstr ""

#: ../../source/multi-host-deployment.rst:110 d23549341c464213b5a558876de90a1b
msgid ""
"The ``iptables -t nat -A POSTROUTING -s`` command is applied to all "
"packets coming from each Docker network (``-s 172.17.34.0/24``, ``-s "
"172.17.29.0/24``, ``-s 172.17.33.0/24``) that are not destined to their "
"local network (``! -d 172.17.0.0/16``). The ``-j MASQUERADE`` option "
"hides the Docker network behind the IP address of the host machine."
msgstr ""

#: ../../source/multi-host-deployment.rst:117 9b984722c6f04c6dabfc823c353ca37e
msgid ""
"By setting up SNAT with iptables this way, we enable seamless "
"communication between Docker containers across different network "
"segments, which is crucial for a distributed system like GeoMX."
msgstr ""

#: ../../source/multi-host-deployment.rst:122 6936f742882743db9f7f054642006e35
msgid ""
"In addition to the above-mentioned method of manually configuring network"
" route tables, there are many other ways to establish connectivity "
"between Docker containers in different network segments. For example, "
"`Weave <https://github.com/weaveworks/weave>`__ and `Klonet "
"<https://caod.oriprobe.com/articles/62233507/Klonet__a_network_emulation_platform_for_the_techn.htm>`__"
" are good choices."
msgstr ""

#: ../../source/multi-host-deployment.rst:130 f675e26fd6164033b52969ce5e28e52f
msgid ""
"Weave creates a virtual network that connects Docker containers deployed "
"across multiple hosts. Essentially, it establishes a network bridge "
"between hosts which allows containers to communicate as if they are on "
"the same host."
msgstr ""

#: ../../source/multi-host-deployment.rst:135 5cc71e5b7405444a83608292851926c7
msgid ""
"Here’s a basic example of how you could use Weave to connect Docker "
"containers."
msgstr ""

#: ../../source/multi-host-deployment.rst:138 a7c73c1348524691b68e1165badfb96e
msgid "Install Weave on each of the host machines:"
msgstr ""

#: ../../source/multi-host-deployment.rst:145 97d764f1b79744909648af552f45ded1
msgid "Launch Weave on each host:"
msgstr ""

#: ../../source/multi-host-deployment.rst:151 1fb3420ae8f2401384fd4fba902a53f7
msgid ""
"If you have Docker containers running, you can attach them to the Weave "
"network:"
msgstr ""

#: ../../source/multi-host-deployment.rst:158 9dfecc3d38c04152920e68999ef0941d
msgid ""
"This will attach the specified container to the Weave network. Now, all "
"containers connected via Weave can communicate seamlessly, regardless of "
"the host they’re on. If you encounter any problems using weave, please "
"refer to the latest `weave docs "
"<https://www.weave.works/docs/net/latest/install/installing-weave/>`__ "
"for the latest deployment guide."
msgstr ""

#: ../../source/multi-host-deployment.rst:165 699398acb5224b9aa23bb0829129da04
msgid ""
"Keep in mind that while Weave is an excellent tool, it’s best suited for "
"small to medium-sized networks. For larger networks or for networks with "
"specific performance requirements, the Klonet platform might be more "
"appropriate."
msgstr ""

#: ../../source/multi-host-deployment.rst:174 1b0bbf4854b14836951c0106cb2d86a8
msgid ""
"If there is a firewall between host machines, you must permit traffic to "
"flow through TCP 6783 and UDP 6783 / 6784, which are Weave’s control and "
"data ports."
msgstr ""

#: ../../source/multi-host-deployment.rst:178 a327b06fdeba43a9bba6e1c707f209cd
msgid ""
"After setting up the network and ensuring the Docker containers can "
"communicate with each other, the next step is to run the GeoMX processes "
"in these containers. To do this, you need to set up the environment "
"variables (described in the chapter of :doc:`Pseudo-distributed "
"Deployment <pseudo-distributed-deployment>` as per your GeoMX "
"configuration and start the different node processes in different "
"containers."
msgstr ""

#: ../../source/multi-host-deployment.rst:186 b23dc42c00394915a293a58c5b3574d3
msgid ""
"Kindly remember to correctly assign the IP addresses and port numbers for"
" the global scheduler and all local schedulers. The containers running "
"these schedulers should reflect their actual IP addresses within your "
"network."
msgstr ""

#: ../../source/multi-host-deployment.rst:192 48be28b6c8164c88815d97fd14fbdf11
msgid ""
"Please ensure that all these containers expose their ports to the host "
"machine. This step is known as “port mapping” and is crucial for allowing"
" external applications or systems to communicate with the GeoMX service "
"running inside the Docker container."
msgstr ""

#: ../../source/multi-host-deployment.rst:197 42eebe6db7ec469d9caa570fde67f94f
msgid ""
"To export a container’s port to the host, use the ``-p`` option when "
"running Docker image. For example, if we have the global scheduler "
"listening on port 9092, we map it to port 9093 on its host machine via:"
msgstr ""

#: ../../source/multi-host-deployment.rst:206 eeba0cb1295649d58d2e230a85381415
msgid ""
"Remember to adjust the port numbers to avoid port conflicts when setting "
"up your Docker containers. When you map a container’s port to a port on "
"the host machine, that port on the host machine gets reserved for the "
"container. This means that no other process or container can use that "
"same port on the host machine while it’s reserved. If multiple containers"
" on the same host machine try to map to the same host port, a port "
"conflict will occur, leading to errors and potentially failed "
"deployments."
msgstr ""

#: ../../source/multi-host-deployment.rst:215 d21e6ec772d34882925a1f4e9fc25ad8
msgid ""
"When setting up the global server and all local servers, you need to "
"specify the IP and port number of the global scheduler. This is typically"
" done by setting the ``DMLC_PS_GLOBAL_ROOT_URI`` and "
"``DMLC_PS_GLOBAL_ROOT_PORT`` environment variables to the IP and port "
"number of the global scheduler."
msgstr ""

#: ../../source/multi-host-deployment.rst:221 a874393f6c034d209d3faa5a57bc6ff8
msgid ""
"For all the servers and workers (including the global server and master "
"worker), it’s necessary to specify the IP and port number of the local "
"scheduler in their party. This can be done by setting the "
"``DMLC_PS_ROOT_URI`` and ``DMLC_PS_ROOT_PORT`` environment variables to "
"the IP and port number of their own local scheduler."
msgstr ""

#: ../../source/multi-host-deployment.rst:227 e13483dbf2c04edc900e592d76d9b6b4
msgid ""
"Here’s an example of how you might set these variables in a global server"
" node:"
msgstr ""

#: ../../source/multi-host-deployment.rst:248 5a1a15ee078b4d8184422b7a1833835c
msgid ""
"Remember to replace the IP addresses and port numbers according to your "
"actual network configuration. The configuration for other environment "
"variables remains the same as previously discussed."
msgstr ""

