/**
 *  Copyright (c) 2015 by Contributors
 *  Modifications Copyright (c) 2021 by Contributors at INET-RC
 */
package ps;
option optimize_for = LITE_RUNTIME;

message PBNode {
  // the node role
  required int32 role = 1;
  // node id
  optional int32 id = 2;
  // hostname or ip
  optional string hostname = 3;
  // the port this node is binding
  optional int32 port = 4;
  //added by huaman
  repeated int32 udp_port = 5;
  // whether this node is created by failover
  optional bool is_recovery = 6; //modified by huaman
  // the locally unique id of an customer
  optional int32 customer_id = 10;
}

// system control info
message PBControl {
  required int32 cmd = 1;
  repeated PBNode node = 2;
  optional int32 barrier_group = 3;
  optional uint64 msg_sig = 4;
}

// mete information about a message
message PBMeta {
  // message.head
  optional int32 head = 1;
  // message.body
  optional bytes body = 2;
  // if set, then it is system control task. otherwise, it is for app
  optional PBControl control = 3;
  // true: a request task
  // false: the response task to the request task with the same *time*
  optional bool request = 4 [default = false];
  // the unique id of an application
  optional int32 app_id = 7;
  // the timestamp of this message
  optional int32 timestamp = 8;
  // data type of message.data[i]
  repeated int32 data_type = 9 [packed=true];
  // the locally unique id of an customer
  optional int32 customer_id = 10;
  // whether or not a push message
  optional bool push = 5;
  // whether or not it's for SimpleApp
  optional bool simple_app = 6 [default = false];
//begin, added by huaman
   //record msg's sender
   optional int32 sender = 11;
   //record msg's recver
   optional int32 recver = 12;
   //record the data's msg's first_key, used for calculate resender_key
   optional int32 first_key = 13;
   optional int32 seq = 14;
   optional int32 seq_begin = 15;
   optional int32 seq_end = 16;
   optional int32 channel = 17;
   optional int32 msg_type = 18;
   optional int32 push_op = 19;
   optional int32 val_bytes = 20;
   optional int32 total_bytes = 21;
   optional int32 keys_len = 22;
   optional int32 vals_len = 23;
   optional int32 lens_len = 24;
   repeated float compr = 25;
   optional int32 bits_num = 26;
  //end, added by huaman
  //added by vbc
  optional int32 priority =27 [default = 0];
  // add by cqq
  optional int32 key = 28;
  optional int32 version = 29;
  //added by vbc
  optional int32 iters = 30;



}
