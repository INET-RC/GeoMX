// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace ps {

void protobuf_ShutdownFile_meta_2eproto() {
  delete PBNode::default_instance_;
  delete PBControl::default_instance_;
  delete PBMeta::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_meta_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_meta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PBNode::default_instance_ = new PBNode();
  PBControl::default_instance_ = new PBControl();
  PBMeta::default_instance_ = new PBMeta();
  PBNode::default_instance_->InitAsDefaultInstance();
  PBControl::default_instance_->InitAsDefaultInstance();
  PBMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_meta_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_meta_2eproto_once_);
void protobuf_AddDesc_meta_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_meta_2eproto_once_,
                 &protobuf_AddDesc_meta_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_meta_2eproto {
  StaticDescriptorInitializer_meta_2eproto() {
    protobuf_AddDesc_meta_2eproto();
  }
} static_descriptor_initializer_meta_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PBNode::kRoleFieldNumber;
const int PBNode::kIdFieldNumber;
const int PBNode::kHostnameFieldNumber;
const int PBNode::kPortFieldNumber;
const int PBNode::kUdpPortFieldNumber;
const int PBNode::kIsRecoveryFieldNumber;
const int PBNode::kCustomerIdFieldNumber;
#endif  // !_MSC_VER

PBNode::PBNode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PBNode::InitAsDefaultInstance() {
}

PBNode::PBNode(const PBNode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PBNode::SharedCtor() {
  _cached_size_ = 0;
  role_ = 0;
  id_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  is_recovery_ = false;
  customer_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBNode::~PBNode() {
  SharedDtor();
}

void PBNode::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PBNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBNode& PBNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_meta_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_meta_2eproto();
#endif
  return *default_instance_;
}

PBNode* PBNode::default_instance_ = NULL;

PBNode* PBNode::New() const {
  return new PBNode;
}

void PBNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_ = 0;
    id_ = 0;
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    port_ = 0;
    is_recovery_ = false;
    customer_id_ = 0;
  }
  udp_port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PBNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hostname;
        break;
      }

      // optional string hostname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_udp_port;
        break;
      }

      // repeated int32 udp_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udp_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_udp_port())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_udp_port())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_udp_port;
        if (input->ExpectTag(48)) goto parse_is_recovery;
        break;
      }

      // optional bool is_recovery = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_recovery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recovery_)));
          set_has_is_recovery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_customer_id;
        break;
      }

      // optional int32 customer_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_id_)));
          set_has_customer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hostname(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // repeated int32 udp_port = 5;
  for (int i = 0; i < this->udp_port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->udp_port(i), output);
  }

  // optional bool is_recovery = 6;
  if (has_is_recovery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_recovery(), output);
  }

  // optional int32 customer_id = 10;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->customer_id(), output);
  }

}

int PBNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string hostname = 3;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool is_recovery = 6;
    if (has_is_recovery()) {
      total_size += 1 + 1;
    }

    // optional int32 customer_id = 10;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer_id());
    }

  }
  // repeated int32 udp_port = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->udp_port_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->udp_port(i));
    }
    total_size += 1 * this->udp_port_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBNode*>(&from));
}

void PBNode::MergeFrom(const PBNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  udp_port_.MergeFrom(from.udp_port_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_is_recovery()) {
      set_is_recovery(from.is_recovery());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
  }
}

void PBNode::CopyFrom(const PBNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBNode::Swap(PBNode* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(id_, other->id_);
    std::swap(hostname_, other->hostname_);
    std::swap(port_, other->port_);
    udp_port_.Swap(&other->udp_port_);
    std::swap(is_recovery_, other->is_recovery_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PBNode::GetTypeName() const {
  return "ps.PBNode";
}


// ===================================================================

#ifndef _MSC_VER
const int PBControl::kCmdFieldNumber;
const int PBControl::kNodeFieldNumber;
const int PBControl::kBarrierGroupFieldNumber;
const int PBControl::kMsgSigFieldNumber;
#endif  // !_MSC_VER

PBControl::PBControl()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PBControl::InitAsDefaultInstance() {
}

PBControl::PBControl(const PBControl& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PBControl::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  barrier_group_ = 0;
  msg_sig_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBControl::~PBControl() {
  SharedDtor();
}

void PBControl::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PBControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBControl& PBControl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_meta_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_meta_2eproto();
#endif
  return *default_instance_;
}

PBControl* PBControl::default_instance_ = NULL;

PBControl* PBControl::New() const {
  return new PBControl;
}

void PBControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    barrier_group_ = 0;
    msg_sig_ = GOOGLE_ULONGLONG(0);
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PBControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // repeated .ps.PBNode node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        if (input->ExpectTag(24)) goto parse_barrier_group;
        break;
      }

      // optional int32 barrier_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_barrier_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &barrier_group_)));
          set_has_barrier_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msg_sig;
        break;
      }

      // optional uint64 msg_sig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_sig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_sig_)));
          set_has_msg_sig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // repeated .ps.PBNode node = 2;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->node(i), output);
  }

  // optional int32 barrier_group = 3;
  if (has_barrier_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->barrier_group(), output);
  }

  // optional uint64 msg_sig = 4;
  if (has_msg_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_sig(), output);
  }

}

int PBControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 barrier_group = 3;
    if (has_barrier_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->barrier_group());
    }

    // optional uint64 msg_sig = 4;
    if (has_msg_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_sig());
    }

  }
  // repeated .ps.PBNode node = 2;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBControl*>(&from));
}

void PBControl::MergeFrom(const PBControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_barrier_group()) {
      set_barrier_group(from.barrier_group());
    }
    if (from.has_msg_sig()) {
      set_msg_sig(from.msg_sig());
    }
  }
}

void PBControl::CopyFrom(const PBControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void PBControl::Swap(PBControl* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    node_.Swap(&other->node_);
    std::swap(barrier_group_, other->barrier_group_);
    std::swap(msg_sig_, other->msg_sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PBControl::GetTypeName() const {
  return "ps.PBControl";
}


// ===================================================================

#ifndef _MSC_VER
const int PBMeta::kHeadFieldNumber;
const int PBMeta::kBodyFieldNumber;
const int PBMeta::kControlFieldNumber;
const int PBMeta::kRequestFieldNumber;
const int PBMeta::kAppIdFieldNumber;
const int PBMeta::kTimestampFieldNumber;
const int PBMeta::kDataTypeFieldNumber;
const int PBMeta::kCustomerIdFieldNumber;
const int PBMeta::kPushFieldNumber;
const int PBMeta::kSimpleAppFieldNumber;
const int PBMeta::kSenderFieldNumber;
const int PBMeta::kRecverFieldNumber;
const int PBMeta::kFirstKeyFieldNumber;
const int PBMeta::kSeqFieldNumber;
const int PBMeta::kSeqBeginFieldNumber;
const int PBMeta::kSeqEndFieldNumber;
const int PBMeta::kChannelFieldNumber;
const int PBMeta::kMsgTypeFieldNumber;
const int PBMeta::kPushOpFieldNumber;
const int PBMeta::kValBytesFieldNumber;
const int PBMeta::kTotalBytesFieldNumber;
const int PBMeta::kKeysLenFieldNumber;
const int PBMeta::kValsLenFieldNumber;
const int PBMeta::kLensLenFieldNumber;
const int PBMeta::kComprFieldNumber;
const int PBMeta::kBitsNumFieldNumber;
const int PBMeta::kPriorityFieldNumber;
const int PBMeta::kKeyFieldNumber;
const int PBMeta::kVersionFieldNumber;
const int PBMeta::kItersFieldNumber;
#endif  // !_MSC_VER

PBMeta::PBMeta()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PBMeta::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  control_ = const_cast< ::ps::PBControl*>(
      ::ps::PBControl::internal_default_instance());
#else
  control_ = const_cast< ::ps::PBControl*>(&::ps::PBControl::default_instance());
#endif
}

PBMeta::PBMeta(const PBMeta& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PBMeta::SharedCtor() {
  _cached_size_ = 0;
  head_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  control_ = NULL;
  request_ = false;
  app_id_ = 0;
  timestamp_ = 0;
  customer_id_ = 0;
  push_ = false;
  simple_app_ = false;
  sender_ = 0;
  recver_ = 0;
  first_key_ = 0;
  seq_ = 0;
  seq_begin_ = 0;
  seq_end_ = 0;
  channel_ = 0;
  msg_type_ = 0;
  push_op_ = 0;
  val_bytes_ = 0;
  total_bytes_ = 0;
  keys_len_ = 0;
  vals_len_ = 0;
  lens_len_ = 0;
  bits_num_ = 0;
  priority_ = 0;
  key_ = 0;
  version_ = 0;
  iters_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMeta::~PBMeta() {
  SharedDtor();
}

void PBMeta::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete control_;
  }
}

void PBMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBMeta& PBMeta::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_meta_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_meta_2eproto();
#endif
  return *default_instance_;
}

PBMeta* PBMeta::default_instance_ = NULL;

PBMeta* PBMeta::New() const {
  return new PBMeta;
}

void PBMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    head_ = 0;
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    if (has_control()) {
      if (control_ != NULL) control_->::ps::PBControl::Clear();
    }
    request_ = false;
    app_id_ = 0;
    timestamp_ = 0;
    customer_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    push_ = false;
    simple_app_ = false;
    sender_ = 0;
    recver_ = 0;
    first_key_ = 0;
    seq_ = 0;
    seq_begin_ = 0;
    seq_end_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    channel_ = 0;
    msg_type_ = 0;
    push_op_ = 0;
    val_bytes_ = 0;
    total_bytes_ = 0;
    keys_len_ = 0;
    vals_len_ = 0;
    lens_len_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    bits_num_ = 0;
    priority_ = 0;
    key_ = 0;
    version_ = 0;
    iters_ = 0;
  }
  data_type_.Clear();
  compr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PBMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_control;
        break;
      }

      // optional .ps.PBControl control = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_request;
        break;
      }

      // optional bool request = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_push;
        break;
      }

      // optional bool push = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_push:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_)));
          set_has_push();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_simple_app;
        break;
      }

      // optional bool simple_app = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_simple_app:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simple_app_)));
          set_has_simple_app();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_app_id;
        break;
      }

      // optional int32 app_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_data_type;
        break;
      }

      // repeated int32 data_type = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_data_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_customer_id;
        break;
      }

      // optional int32 customer_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_id_)));
          set_has_customer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sender;
        break;
      }

      // optional int32 sender = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_recver;
        break;
      }

      // optional int32 recver = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recver_)));
          set_has_recver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_first_key;
        break;
      }

      // optional int32 first_key = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_key_)));
          set_has_first_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_seq;
        break;
      }

      // optional int32 seq = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_seq_begin;
        break;
      }

      // optional int32 seq_begin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_begin_)));
          set_has_seq_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_seq_end;
        break;
      }

      // optional int32 seq_end = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_end_)));
          set_has_seq_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_channel;
        break;
      }

      // optional int32 channel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_msg_type;
        break;
      }

      // optional int32 msg_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_push_op;
        break;
      }

      // optional int32 push_op = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_push_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &push_op_)));
          set_has_push_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_val_bytes;
        break;
      }

      // optional int32 val_bytes = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_bytes_)));
          set_has_val_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_total_bytes;
        break;
      }

      // optional int32 total_bytes = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_keys_len;
        break;
      }

      // optional int32 keys_len = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keys_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keys_len_)));
          set_has_keys_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_vals_len;
        break;
      }

      // optional int32 vals_len = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vals_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vals_len_)));
          set_has_vals_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_lens_len;
        break;
      }

      // optional int32 lens_len = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lens_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lens_len_)));
          set_has_lens_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_compr;
        break;
      }

      // repeated float compr = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_compr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 205, input, this->mutable_compr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_compr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_compr;
        if (input->ExpectTag(208)) goto parse_bits_num;
        break;
      }

      // optional int32 bits_num = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_num_)));
          set_has_bits_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_priority;
        break;
      }

      // optional int32 priority = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_key;
        break;
      }

      // optional int32 key = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_version;
        break;
      }

      // optional int32 version = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_iters;
        break;
      }

      // optional int32 iters = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iters_)));
          set_has_iters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->head(), output);
  }

  // optional bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->body(), output);
  }

  // optional .ps.PBControl control = 3;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->control(), output);
  }

  // optional bool request = 4 [default = false];
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->request(), output);
  }

  // optional bool push = 5;
  if (has_push()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->push(), output);
  }

  // optional bool simple_app = 6 [default = false];
  if (has_simple_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->simple_app(), output);
  }

  // optional int32 app_id = 7;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->app_id(), output);
  }

  // optional int32 timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timestamp(), output);
  }

  // repeated int32 data_type = 9 [packed = true];
  if (this->data_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_type_cached_byte_size_);
  }
  for (int i = 0; i < this->data_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data_type(i), output);
  }

  // optional int32 customer_id = 10;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->customer_id(), output);
  }

  // optional int32 sender = 11;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sender(), output);
  }

  // optional int32 recver = 12;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->recver(), output);
  }

  // optional int32 first_key = 13;
  if (has_first_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->first_key(), output);
  }

  // optional int32 seq = 14;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->seq(), output);
  }

  // optional int32 seq_begin = 15;
  if (has_seq_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->seq_begin(), output);
  }

  // optional int32 seq_end = 16;
  if (has_seq_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->seq_end(), output);
  }

  // optional int32 channel = 17;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->channel(), output);
  }

  // optional int32 msg_type = 18;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->msg_type(), output);
  }

  // optional int32 push_op = 19;
  if (has_push_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->push_op(), output);
  }

  // optional int32 val_bytes = 20;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->val_bytes(), output);
  }

  // optional int32 total_bytes = 21;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->total_bytes(), output);
  }

  // optional int32 keys_len = 22;
  if (has_keys_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->keys_len(), output);
  }

  // optional int32 vals_len = 23;
  if (has_vals_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->vals_len(), output);
  }

  // optional int32 lens_len = 24;
  if (has_lens_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->lens_len(), output);
  }

  // repeated float compr = 25;
  for (int i = 0; i < this->compr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      25, this->compr(i), output);
  }

  // optional int32 bits_num = 26;
  if (has_bits_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->bits_num(), output);
  }

  // optional int32 priority = 27 [default = 0];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->priority(), output);
  }

  // optional int32 key = 28;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->key(), output);
  }

  // optional int32 version = 29;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->version(), output);
  }

  // optional int32 iters = 30;
  if (has_iters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->iters(), output);
  }

}

int PBMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional .ps.PBControl control = 3;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

    // optional bool request = 4 [default = false];
    if (has_request()) {
      total_size += 1 + 1;
    }

    // optional int32 app_id = 7;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // optional int32 timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional int32 customer_id = 10;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool push = 5;
    if (has_push()) {
      total_size += 1 + 1;
    }

    // optional bool simple_app = 6 [default = false];
    if (has_simple_app()) {
      total_size += 1 + 1;
    }

    // optional int32 sender = 11;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender());
    }

    // optional int32 recver = 12;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recver());
    }

    // optional int32 first_key = 13;
    if (has_first_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_key());
    }

    // optional int32 seq = 14;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // optional int32 seq_begin = 15;
    if (has_seq_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_begin());
    }

    // optional int32 seq_end = 16;
    if (has_seq_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_end());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 channel = 17;
    if (has_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 msg_type = 18;
    if (has_msg_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }

    // optional int32 push_op = 19;
    if (has_push_op()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->push_op());
    }

    // optional int32 val_bytes = 20;
    if (has_val_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_bytes());
    }

    // optional int32 total_bytes = 21;
    if (has_total_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_bytes());
    }

    // optional int32 keys_len = 22;
    if (has_keys_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keys_len());
    }

    // optional int32 vals_len = 23;
    if (has_vals_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vals_len());
    }

    // optional int32 lens_len = 24;
    if (has_lens_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lens_len());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional int32 bits_num = 26;
    if (has_bits_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits_num());
    }

    // optional int32 priority = 27 [default = 0];
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int32 key = 28;
    if (has_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 version = 29;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 iters = 30;
    if (has_iters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iters());
    }

  }
  // repeated int32 data_type = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float compr = 25;
  {
    int data_size = 0;
    data_size = 4 * this->compr_size();
    total_size += 2 * this->compr_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBMeta*>(&from));
}

void PBMeta::MergeFrom(const PBMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_type_.MergeFrom(from.data_type_);
  compr_.MergeFrom(from.compr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_control()) {
      mutable_control()->::ps::PBControl::MergeFrom(from.control());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_push()) {
      set_push(from.push());
    }
    if (from.has_simple_app()) {
      set_simple_app(from.simple_app());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_recver()) {
      set_recver(from.recver());
    }
    if (from.has_first_key()) {
      set_first_key(from.first_key());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_seq_begin()) {
      set_seq_begin(from.seq_begin());
    }
    if (from.has_seq_end()) {
      set_seq_end(from.seq_end());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_push_op()) {
      set_push_op(from.push_op());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
    if (from.has_keys_len()) {
      set_keys_len(from.keys_len());
    }
    if (from.has_vals_len()) {
      set_vals_len(from.vals_len());
    }
    if (from.has_lens_len()) {
      set_lens_len(from.lens_len());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_bits_num()) {
      set_bits_num(from.bits_num());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_iters()) {
      set_iters(from.iters());
    }
  }
}

void PBMeta::CopyFrom(const PBMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMeta::IsInitialized() const {

  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  return true;
}

void PBMeta::Swap(PBMeta* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(control_, other->control_);
    std::swap(request_, other->request_);
    std::swap(app_id_, other->app_id_);
    std::swap(timestamp_, other->timestamp_);
    data_type_.Swap(&other->data_type_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(push_, other->push_);
    std::swap(simple_app_, other->simple_app_);
    std::swap(sender_, other->sender_);
    std::swap(recver_, other->recver_);
    std::swap(first_key_, other->first_key_);
    std::swap(seq_, other->seq_);
    std::swap(seq_begin_, other->seq_begin_);
    std::swap(seq_end_, other->seq_end_);
    std::swap(channel_, other->channel_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(push_op_, other->push_op_);
    std::swap(val_bytes_, other->val_bytes_);
    std::swap(total_bytes_, other->total_bytes_);
    std::swap(keys_len_, other->keys_len_);
    std::swap(vals_len_, other->vals_len_);
    std::swap(lens_len_, other->lens_len_);
    compr_.Swap(&other->compr_);
    std::swap(bits_num_, other->bits_num_);
    std::swap(priority_, other->priority_);
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(iters_, other->iters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PBMeta::GetTypeName() const {
  return "ps.PBMeta";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ps

// @@protoc_insertion_point(global_scope)
